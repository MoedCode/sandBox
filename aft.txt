#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int Atoi(const char *str) {
    int res = 0;  // Initialize result

    // Iterate through all characters of input string and update result
    for (int i = 0; str[i] != '\0'; ++i) {
        res = res * 10 + str[i] - '0';
    }

    // return result.
    return res;
}
size_t printDblArr(char** DblArr, size_t NullTrm)
{
	size_t i, j;
	if (NullTrm >  0)
		j = NullTrm;
	else if (NullTrm == 0)
		for (j = 0; DblArr[j]; j++)
			if (DblArr[j] == NULL)
				return (0);

	for (i = 0; i < j; i++)
		printf("[%zu] - %s  \n", i,DblArr[i]);

	return (i);
}
size_t freeDoubleArray(char **argv)
{
	size_t i, j;

	for (j = 0; argv[j]; j++)
			;
	for (i = 0; i < j; i++)
		free(argv[i]);

	free(argv);
	return (i);
}
char  **tokenize(char *cmd, char*  delim)
{
	size_t TksNum = 0;
	char *token = NULL, **Tokens = NULL;

	token = strtok(cmd, delim);
	while (token)
	{
		Tokens = realloc(Tokens, sizeof(char *) * (TksNum + 1));

		if (!Tokens)
		{
			freeDoubleArray(Tokens);
			perror("tokenaize.c:21 realloc");
			return (NULL);
		}
	/* tokinize && Asign */
		Tokens[TksNum] = strdup(token);
		// printf("tenize.c:25 %s\n",Tokens[TksNum]);
		token = strtok(NULL, delim);
		TksNum++;
	}

		Tokens = realloc(Tokens, sizeof(char *) * (TksNum + 1));
		if (!Tokens)
		{
			freeDoubleArray(Tokens);
			perror("tokenaize.c:21 realloc");
			return (NULL);
		}

		Tokens[TksNum] = NULL;

			return (Tokens);
}
char  **allocat2darr(size_t size, char **arr)
{
   arr =  malloc((size+1) * sizeof(char *));
 return (arr);
}
char **asgnStr2arr( char *str,char *delim)
{

    char **arr = tokenize(str, delim);

    return (arr);
}
int main(int argc, char **argv)
{
    size_t i;
    char **str;

    // i =Atoi (argv[1]);
   str =  asgnStr2arr(argv[1], argv[2]);

printDblArr(str, 0);
freeDoubleArray(str);

 return (0);
}